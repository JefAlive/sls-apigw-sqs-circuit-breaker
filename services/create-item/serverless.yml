service: ${self:custom.defaults.service}-lambda-create-item

frameworkVersion: ${self:custom.defaults.version}

provider:
  name: aws
  runtime: ${self:custom.defaults.lambda.runtime}
  stage: ${self:custom.defaults.stage}
  region: ${self:custom.defaults.region}
  deploymentMethod: ${self:custom.defaults.deploymentMethod}
  deploymentBucket:
    name: ${self:custom.defaults.service}-${self:provider.region}-${aws:accountId}
    serverSideEncryption: AES256
  apiGateway:
    restApiId: ${param:API_GATEWAY_REST_API_ID}
    restApiRootResourceId: ${param:API_GATEWAY_REST_API_ROOT_RESOURCE_ID}
  tracing:
    lambda: true

custom:
  base: ${self:service}-${self:provider.stage}
  defaults: ${file(../../defaults/cloudgto.yml):defaults}

functions:
  createItem:
    handler: src/handlers/handler.handler
    timeout: 30
    runtime: nodejs18.x
    memorySize: 1024
    vpc: {}
    events:
      - http:
          path: /items
          method: POST
          cors: true
          #private: true
          #authorizer:
          #  type: COGNITO_USER_POOLS
          #  authorizerId: ${param:AUTHORIZER_ID}
    environment:
      queueUrl: ${param:CREATEITEMQUEUE-URL}
    iamRoleStatementsName: createItem-role
    iamRoleStatements:
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTraceSegment
          - xray:PutTelemetryRecords
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
        Resource: "*"
      - Effect: Allow
        Action:
          - sqs:SendMessage
        Resource:
          - arn:aws:sqs:${self:provider.region}:${aws:accountId}:${param:CREATEITEMQUEUE-NAME}

plugins:
  - serverless-offline
  - serverless-deployment-bucket
  - serverless-iam-roles-per-function

package:
  individually: true
