service: ${self:custom.defaults.service}-create-item-consumer

frameworkVersion: ${self:custom.defaults.version}

provider:
  name: aws
  runtime: ${self:custom.defaults.lambda.runtime}
  stage: ${self:custom.defaults.stage}
  region: ${self:custom.defaults.region}
  deploymentMethod: ${self:custom.defaults.deploymentMethod}
  deploymentBucket:
    name: ${self:custom.defaults.service}-${self:provider.region}-${aws:accountId}
    serverSideEncryption: AES256
    
custom:
  base: ${self:service}-${self:provider.stage}
  defaults: ${file(../../defaults/cloudgto.yml):defaults}

functions:
  createItemConsumer:
    handler: src/handlers/handler.handler
    timeout: 30
    runtime: nodejs18.x
    memorySize: 1024
    vpc: {}
    events:
      - sqs:
          arn: arn:aws:sqs:${self:provider.region}:${aws:accountId}:${param:CREATEITEMQUEUE-NAME}
    environment:
      ERROR_TOPIC_ARN: ${param:EXTERNALAPIERRORTOPIC-ARN}
    iamRoleStatementsName: createItemConsumer-role
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'sqs:*'
        Resource:
          - arn:aws:sqs:${self:provider.region}:${aws:accountId}:${param:CREATEITEMQUEUE-NAME}
      - Effect: 'Allow'
        Action:
          - 'sns:publish'
        Resource:
          - ${param:EXTERNALAPIERRORTOPIC-ARN}

plugins:
  - serverless-deployment-bucket
  - serverless-iam-roles-per-function

package:
  individually: true

resources:
  Resources:
    EventSourceMapping:
      Type: AWS::Lambda::EventSourceMapping
      Properties:
        EventSourceArn: arn:aws:sqs:${self:provider.region}:${aws:accountId}:${param:CREATEITEMQUEUE-NAME}
        FunctionName:
          Fn::GetAtt:
            - CreateItemConsumerLambdaFunction
            - Arn
  Outputs:
    EventSourceMappingId:
      Value:
        Fn::GetAtt:
          - EventSourceMapping
          - Id